{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacao","NegociacoesView","_mensagem","Mensagem","MensagemView","_init","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","listarTodos","negociacoes","forEach","adiciona","negociacao","catch","texto","erro","setInterval","importarNegociacoes","event","preventDefault","_criarNegociacao","NegociacaoService","adicionar","mensagem","_limparFormulario","apagarTodos","esvaziar","negociacaoService","Promise","all","obterNegociacaoDaSemana","obterNegociacaoDaSemanaAnterior","obterNegociacaoDaSemanaRetrasada","reduce","arrayAchatado","array","concat","filter","some","JSON","stringify","negociacaoExistente","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController {\r\n\r\n    constructor(){\r\n        //serve para mapear o documento, ou seja, a pagina html\r\n        //para poder acessar os valores\r\n        let $ = document.querySelector.bind(document);\r\n        this._inputData = $('#data');\r\n        this._inputQuantidade = $('#quantidade');\r\n        this._inputValor = $('#valor');\r\n        \r\n\r\n        this._listaNegociacoes = new Bind(\r\n            new ListaNegociacao(),\r\n            new NegociacoesView($('#negociacoesView')),\r\n            'adiciona','esvaziar'\r\n        );\r\n        \r\n        this._mensagem = new Bind(\r\n            new Mensagem(),\r\n            new MensagemView($('#mensagemView')),\r\n            'texto'\r\n        );\r\n\r\n        this._init();\r\n    }\r\n    \r\n    _init(){\r\n        //aplicar o mesmo refactoring para adicionar\r\n        ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listarTodos())\r\n            .then(negociacoes => \r\n                negociacoes.forEach(negociacao => \r\n                    this._listaNegociacoes.adiciona(negociacao)))\r\n            .catch(erro => this._mensagem.texto = erro);\r\n     \r\n        //este metodo eh uma especie de scheduler para poder executar\r\n        //alfuma operacao de tempos em tempos, e o tempo eh setado\r\n        //em milisegundos\r\n        setInterval(() => {\r\n            this.importarNegociacoes();\r\n        }, 3000);\r\n    }\r\n\r\n    adicionar(event){\r\n        event.preventDefault();\r\n\r\n        let negociacao = this._criarNegociacao();\r\n\r\n        new NegociacaoService()\r\n            .adicionar(negociacao)\r\n            .then(mensagem => {\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = mensagem;\r\n                this._limparFormulario();\r\n            })\r\n            .catch(mensagem => this._mensagem.texto = mensagem);\r\n\r\n    }\r\n\r\n    apagar(){\r\n\r\n        //aplicar o mesmo refactoring para adicionar\r\n        ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagarTodos())\r\n            .then(() => {\r\n                this._listaNegociacoes.esvaziar();\r\n                this._mensagem.texto = 'Negociações apagadas com sucesso!';\r\n                this._limparFormulario();\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);        \r\n\r\n        \r\n    }\r\n\r\n    importarNegociacoes(){\r\n        let negociacaoService = new NegociacaoService();\r\n\r\n        //a promise.all recebe um array de promises, e a ordem que for passado\r\n        //esse array sera a ordem que sera tratado, ou seja, o proximo item da\r\n        //lista soh eh processado apos o anterior terminar, e eh centralizado\r\n        //em um unico lugar o que deve ser feito com as promises que retornarnarem\r\n        //com sucesso e com as que retornarem com erro\r\n        Promise.all(\r\n            [negociacaoService.obterNegociacaoDaSemana(),\r\n             negociacaoService.obterNegociacaoDaSemanaAnterior(),\r\n             negociacaoService.obterNegociacaoDaSemanaRetrasada()]\r\n        )\r\n        //os retornos do array de promises gera um array de retornos,\r\n        //e neste caso cada promisse retorno um array, entao devo tratar\r\n        //os arrays internos primeiro, para gerar um array simples, essa\r\n        //operacao eh chamada de flating, pois estao achatando o array de\r\n        //arrays em um unico array, e entao depois eh soh processar os itens\r\n        //do array no que precisar\r\n        .then(negociacoes => \r\n                negociacoes.reduce((arrayAchatado, array) => \r\n                    arrayAchatado.concat(array), []))\r\n        //adicionado tratamento para nao deixar duplicar\r\n        //os dados que ja foram importados\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao => \r\n                !this._listaNegociacoes.negociacoes.some(negociacaoExistente => \r\n                    //o comando JSON.stringify eh usando para poder serializar\r\n                    //o objeto para facilitar a comparacao, pois diferente do java, nao\r\n                    //existe uma forma de comparar objetos, como o .equals\r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\r\n        //retorno com sucesso\r\n        .then(negociacoes => {\r\n            negociacoes.forEach(negociacao => \r\n                this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações da semana carregadas com sucesso.';\r\n        })\r\n        //retorno com erro\r\n        .catch(erro => this._mensagem.texto = erro);\r\n\r\n    }\r\n\r\n    _criarNegociacao(){\r\n        return new Negociacao(  DateHelper.textoParaData(this._inputData.value), \r\n                                parseInt(this._inputQuantidade.value), \r\n                                parseFloat(this._inputValor.value));\r\n    }\r\n\r\n    _limparFormulario(){\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n\r\n        this._inputData.focus();\r\n    }\r\n}"]}