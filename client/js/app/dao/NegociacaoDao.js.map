{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAEhB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA;AACA;AACA,oBAAIC,UAAU,MAAKN,WAAL,CACGO,WADH,CACe,CAAC,MAAKN,MAAN,CADf,EAC8B,WAD9B,EAEGO,WAFH,CAEe,MAAKP,MAFpB,EAGGQ,GAHH,CAGOP,UAHP,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,0CAAP;AACH,iBAHD;AAIH,aAjBM,CAAP;AAmBH;;;sCAEY;AAAA;;AACTO,oBAAQC,GAAR,CAAY,wBAAZ;AACA,mBAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA;AACA;AACA,oBAAIY,SAAS,OAAKjB,WAAL,CACIO,WADJ,CACgB,CAAC,OAAKN,MAAN,CADhB,EAC+B,WAD/B,EAEIO,WAFJ,CAEgB,OAAKP,MAFrB,EAGIiB,UAHJ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEA;AACAF,uBAAOP,SAAP,GAAmB,aAAK;AACpB;AACA,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA;AACA,wBAAID,KAAJ,EAAU;AACN;AACA,4BAAIE,OAAOF,MAAMG,KAAjB;;AAEA;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EACeJ,KAAKK,WADpB,EAEeL,KAAKM,MAFpB,CAAjB;;AAIA;AACAR,8BAAMS,QAAN;AACH,qBAXD,MAWO;AACHzB,gCAAQe,WAAR;AACH;AACJ,iBAnBD;;AAqBA;AACAF,uBAAON,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAtCM,CAAP;AAuCH;;;sCAEY;AAAA;;AACT,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA;AACA;AACA,oBAAIC,UAAU,OAAKN,WAAL,CACGO,WADH,CACe,CAAC,OAAKN,MAAN,CADf,EAC8B,WAD9B,EAEGO,WAFH,CAEe,OAAKP,MAFpB,EAGG6B,KAHH,EAAd;;AAKAxB,wBAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAjBM,CAAP;AAkBH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            //1-abre uma transaction\r\n            //2-pega a store (tabela)\r\n            //3-chama o insert e pega um request\r\n            let request = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .add(negociacao);\r\n\r\n            request.onsuccess = e => {\r\n                resolve();\r\n            }\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível cadastrar a negociação.');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    listarTodos(){\r\n        console.log('iniciando limpar todos');\r\n        return new Promise((resolve, reject) => {\r\n            //1-abre uma transaction\r\n            //2-pega a store (tabela)\r\n            //3-pega um cursor com a posicao do primeiro elemento\r\n            let cursor = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .openCursor();\r\n\r\n            let negociacoes = [];\r\n            \r\n            //em caso de sucesso sera executado\r\n            cursor.onsuccess = e => {\r\n                //aponta para item do cursor\r\n                let atual = e.target.result;\r\n\r\n                //testa se valor eh valido\r\n                if (atual){\r\n                    //pega o valor\r\n                    let dado = atual.value;\r\n\r\n                    //adiciona na lista\r\n                    negociacoes.push(new Negociacao(dado._data,\r\n                                                    dado._quantidade,\r\n                                                    dado._valor));\r\n                    \r\n                    //chama o proximo valor do cursor, e volta para o onsuccess\r\n                    atual.continue();\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            //em caso de erro sera executado\r\n            cursor.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações.');\r\n            }\r\n        });\r\n    }\r\n\r\n    apagarTodos(){\r\n        return new Promise((resolve, reject) => {\r\n            //1-abre uma transaction\r\n            //2-pega a store (tabela)\r\n            //3-chama o delete e pega um request\r\n            let request = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .clear();\r\n\r\n            request.onsuccess = e => {\r\n                resolve();\r\n            }\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Não foi possível apagar as negociações.');\r\n            }\r\n        });       \r\n    }\r\n\r\n}"]}