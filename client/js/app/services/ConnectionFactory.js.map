{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","versao","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,SAAS,CAAf;AACA,QAAMC,SAAS,YAAf;;AAEA;AACA;AACA;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAMC,MAAM,sDAAN,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA;AACA,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,MAA9B,CAAlB;;AAEA;AACA;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/B;AACAd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKA;AACA;AACAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAI,CAACf,UAAL,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACA;AACA;AACA;AACA;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAdD;;AAgBA;AACAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAMH,iBArCM,CAAP;AAsCH;AA7CL;AAAA;AAAA,0CA+CyBrB,UA/CzB,EA+CoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB;AACA,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAgD;AAC5C;AACAzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAED;AACA;AACAzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAVD;AAWH;AA3DL;AAAA;AAAA,8CA6D4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAlEL;;AAAA;AAAA;AAoEH,CAhFuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["//apliquei o module pattern, fazendo isso eu escondo todas as variaveis\r\n//declaradas fora da classe e deixo visivel somente o que der return, onde\r\n//no caso foi a classe ConnectionFactory\r\nvar ConnectionFactory = (function (){\r\n\r\n    const stores = ['negociacoes'];\r\n    const versao = 1;\r\n    const dbName = 'aluraframe';\r\n    \r\n    //esse objeto sera responsavel para guardar o objeto da conexao com\r\n    //o indexedDB, e foi criada fora da classe pois tenho como requisito\r\n    //ter apenas uma conexao para a aplicacao, seria um singleton\r\n    var connection = null;\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory{\r\n    \r\n        constructor(){\r\n            throw Error('Não é possível criar instancias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                //faco uma requisicao para abrir uma conexao com o\r\n                //indexedDB\r\n                let openRequest = window.indexedDB.open(dbName, versao);\r\n    \r\n                //caso esteja criando o banco pela primeira vez\r\n                //ou alterando um banco ja criado\r\n                openRequest.onupgradeneeded = e => {\r\n                    //o parametro enviado indica a conexao realizada\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n                \r\n                //toda vez que a conexao for aberta com sucesso\r\n                //pode ser a primeira ou todas as outras\r\n                openRequest.onsuccess = e => {\r\n                    if (!connection){\r\n                        connection = e.target.result;\r\n                        //aplicacao de tecnica monkey patching para\r\n                        //sobrescrever a funcionalidade padrao do close\r\n                        //connection para que a mesma nao seja fechada\r\n                        //- sempre usar uma funcao simples, pois o escopo\r\n                        //de this deve ser variado\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error('A conexão não pode ser fechada diretamente.');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                \r\n                //toda vez que ocorrer um erro\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n    \r\n                    reject(e.target.error.name);\r\n                };\r\n                \r\n            });\r\n        }\r\n        \r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                //verifica se o banco \"store\" ja esta criado\r\n                if (connection.objectStoreNames.contains(store)){\r\n                    //se sim remove\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                \r\n                //cria um novo banco e habilita o auto incremento para\r\n                //as chaves\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}