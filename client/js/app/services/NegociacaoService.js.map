{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona"],"mappings":";;;;;;IAAMA,iB;AAEF,iCAAa;AAAA;;AACT,aAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;;;kDAEwB;AAAA;;AACrB;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,sBAAKJ,KAAL,CACKK,GADL,CACS,oBADT,EAEKC,IAFL,CAEU,uBAAe;AACjB;AACA;AACA;AACAH,4BAAQI,YAAYC,GAAZ,CACJ;AAAA,+BAAU,IAAIC,UAAJ,CAAkB,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAlB,EACkBD,OAAOE,UADzB,EAEkBF,OAAOG,KAFzB,CAAV;AAAA,qBADI,CAAR;AAIH,iBAVL,EAWKC,KAXL,CAWW,gBAAQ;AACXC,4BAAQC,GAAR,CAAYC,IAAZ;AACAd,2BAAO,qDAAP;AACH,iBAdL;AAeH,aAjBM,CAAP;AAkBH;;;0DAEgC;AAAA;;AAC7B,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKJ,KAAL,CACKK,GADL,CACS,sBADT,EAEKC,IAFL,CAEU,uBAAe;AACjBH,4BAAQI,YAAYC,GAAZ,CACJ;AAAA,+BAAU,IAAIC,UAAJ,CAAkB,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAlB,EACkBD,OAAOE,UADzB,EAEkBF,OAAOG,KAFzB,CAAV;AAAA,qBADI,CAAR;AAIH,iBAPL,EAQKC,KARL,CAQW,gBAAQ;AACXC,4BAAQC,GAAR,CAAYC,IAAZ;AACAd,2BAAO,8DAAP;AACH,iBAXL;AAYH,aAbM,CAAP;AAcH;;;2DAEiC;AAAA;;AAC9B,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,uBAAKJ,KAAL,CACKK,GADL,CACS,uBADT,EAEKC,IAFL,CAEU,uBAAe;AACjBH,4BAAQI,YAAYC,GAAZ,CACJ;AAAA,+BAAU,IAAIC,UAAJ,CAAkB,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAlB,EACkBD,OAAOE,UADzB,EAEkBF,OAAOG,KAFzB,CAAV;AAAA,qBADI,CAAR;AAIH,iBAPL,EAQKC,KARL,CAQW,gBAAQ;AACXC,4BAAQC,GAAR,CAAYC,IAAZ;AACAd,2BAAO,+DAAP;AACH,iBAXL;AAYH,aAdM,CAAP;AAeH;;;kCAESe,U,EAAW;AACjB,mBAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCgB,kCAAkBC,aAAlB,GACKf,IADL,CACU;AAAA,2BAAc,IAAIgB,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,iBADV,EAEKjB,IAFL,CAEU;AAAA,2BAAOkB,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,iBAFV,EAGKb,IAHL,CAGW;AAAA,2BAAMH,QAAQ,oCAAR,CAAN;AAAA,iBAHX,EAIKY,KAJL,CAIW;AAAA,2BAAQX,OAAOc,IAAP,CAAR;AAAA,iBAJX;AAKH,aANM,CAAP;AAOH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacaoDaSemana(){\r\n        //este promise esta recebendo um outro promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    //essa lista ja foi tratada na promise anterior\r\n                    //porem ela vem como um objeto json simples\r\n                    //e aqui eu converto para uma outra classe\r\n                    resolve(negociacoes.map(\r\n                        objeto => new Negociacao(   new Date(objeto.data), \r\n                                                    objeto.quantidade, \r\n                                                    objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível carregar as negociações da semana.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaAnterior(){\r\n        return new Promise((resolve, reject) => {\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(\r\n                        objeto => new Negociacao(   new Date(objeto.data), \r\n                                                    objeto.quantidade, \r\n                                                    objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível carregar as negociações da semana anterior.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacaoDaSemanaRetrasada(){\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(\r\n                        objeto => new Negociacao(   new Date(objeto.data), \r\n                                                    objeto.quantidade, \r\n                                                    objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível carregar as negociações da semana retrasada.');\r\n                });\r\n        });        \r\n    }\r\n    \r\n    adicionar(negociacao){\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory.getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then( () => resolve('Negociação adicionada com sucesso!'))\r\n                .catch(erro => reject(erro));\r\n        });\r\n    }\r\n}"]}